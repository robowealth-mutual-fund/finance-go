// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, path, pathParams, queryParams, entity
func (_m *Interface) Get(ctx context.Context, path string, pathParams map[string]string, queryParams map[string]string, entity interface{}) error {
	ret := _m.Called(ctx, path, pathParams, queryParams, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, map[string]string, interface{}) error); ok {
		r0 = rf(ctx, path, pathParams, queryParams, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterface(t mockConstructorTestingTNewInterface) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
